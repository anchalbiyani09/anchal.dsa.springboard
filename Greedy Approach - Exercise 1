class Tester {

    public static int findMaxActivities(int start[], int finish[]) {
        int n = start.length;
        
        if (n == 0) {
            return 0; // No activities can be performed if arrays are empty
        }
        
        // Array to store pairs of start and finish times
        Activity[] activities = new Activity[n];
        for (int i = 0; i < n; i++) {
            activities[i] = new Activity(start[i], finish[i]);
        }
        
        // Sort activities based on finish times (ascending order)
        Arrays.sort(activities, (a1, a2) -> a1.finish - a2.finish);
        
        int maxActivities = 1; // First activity is always chosen
        int lastFinishTime = activities[0].finish;
        
        // Iterate through sorted activities to find maximum number of activities
        for (int i = 1; i < n; i++) {
            if (activities[i].start >= lastFinishTime) {
                // Activity can be performed
                maxActivities++;
                lastFinishTime = activities[i].finish;
            }
        }
        
        return maxActivities;
    }
    
    static class Activity {
        int start;
        int finish;
        
        public Activity(int start, int finish) {
            this.start = start;
            this.finish = finish;
        }
    }

    public static void main(String[] args) {
        int start[] = {1, 3, 0, 5, 8, 5};
        int finish[] = {2, 4, 6, 7, 9, 9};
        
        System.out.println("Maximum number of activities: " + findMaxActivities(start, finish));
    }
}
